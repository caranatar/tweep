/// Represents the types of errors that can be generated by `tweep`
#[derive(Clone, Debug, Eq, PartialEq)]
pub enum ErrorType {
    /// Passage header has no name specified
    EmptyName,

    /// Passage header has whitespace before sigil `::`
    LeadingWhitespace,

    /// Passage header has metadata and tags in wrong order
    MetadataBeforeTags,

    /// Passage header is missing sigil `::`
    MissingSigil,

    /// Passage name has an unescaped `[` character
    UnescapedOpenSquare,

    /// Passage name has an unescaped `{` character
    UnescapedOpenCurly,

    /// Passage name has an unescaped `]` character
    UnescapedCloseSquare,

    /// Passage name has an unescaped `}` character
    UnescapedCloseCurly,

    /// Passage header has an unclosed tag block
    UnclosedTagBlock,

    /// Passage header has an unclosed metadata block
    UnclosedMetadataBlock,

    /// An error was encountered when attempting to parse from the given [`Path`](std::path::Path).
    /// Contains the path string and the error string
    BadInputPath(String, String),
    
}

impl std::fmt::Display for ErrorType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", match self {
            ErrorType::EmptyName => format!("Passage header has an empty name"),
            ErrorType::LeadingWhitespace => format!("Passage header has whitespace before sigil (::)"),
            ErrorType::MetadataBeforeTags => format!("Passage header has metadata before tags"),
            ErrorType::MissingSigil => format!("Passage header missing sigil (::)"),
            ErrorType::UnescapedOpenSquare => format!("Unescaped [ character in passage header"),
            ErrorType::UnescapedOpenCurly => format!("Unescaped {{ character in passage header"),
            ErrorType::UnescapedCloseSquare => format!("Unescaped ] character in passage header"),
            ErrorType::UnescapedCloseCurly => format!("Unescaped }} character in passage header"),
            ErrorType::UnclosedTagBlock => format!("Unclosed tag block in passage header"),
            ErrorType::UnclosedMetadataBlock => format!("Unclosed metadata block in passage header"),
            ErrorType::BadInputPath(path, err_str) => format!("Error opening path {}: {}", path, err_str),
        })
    }
}
